repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { url 'http://tehnut.info/maven/' }
    maven { url 'http://chickenbones.net/maven' }
    maven {
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        //Local repo for custom forge builds.
        //Is not required to exist
        name = "LocalForge"
        url = "../../MinecraftForge/repo/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name 'shinoow'
        url 'https://dl.bintray.com/shinoow/maven/'
    }
    mavenCentral()
}

task crowdin(type: CrowdinDownload) {
    outputs.upToDateWhen { false }
    output = "build/crowdin.zip"
    projectId = 'vampirism'
    extract = true

    // task auomatically skips if this is null
    if (project.hasProperty('CROWDIN_KEY'))
        apiKey = project.CROWDIN_KEY
}


dependencies {
    deobfCompile "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version + ":api"
    runtime "mezz.jei:jei_" + config.minecraft_version + ":" + config.jei_version
    deobfCompile 'mcp.mobius.waila:Waila:' + config.waila_version
    deobfCompile 'info.amerifrance.guideapi:Guide-API:' + config.guide_api_version

    deobfCompile 'com.github.glitchfiend.biomesoplenty:BiomesOPlenty:'+config.minecraft_version+'-'+config.biomesoplenty_version+':api'
    //runtime 'com.github.glitchfiend.biomesoplenty:BiomesOPlenty:'+config.minecraft_version+'-'+config.biomesoplenty_version+':universal'

    deobfCompile 'com.shinoow.abyssalcraft:AbyssalCraft:'+config.minecraft_version+'-'+config.abyssalcraft_version+':api'
    //runtime 'com.shinoow.abyssalcraft:AbyssalCraft:'+config.minecraft_version+'-'+config.abyssalcraft_version+':dev'

}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    mappings = config.mappings
    runDir = "run"
    replaceIn "util/REFERENCE.java"
    replace "@VERSION@", "${project.mod_version}"
    replace "@MVERSION@", "${config.minecraft_version}"
    replace "@FVERSION@", "${config.forge_version}"
    makeObfSourceJar = false // an Srg named sources jar is made if enabled
    useDepAts = true
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "m_version", project.mod_version
    inputs.property "mc_version", project.config.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include '*.info', "*.mcmeta", "META_INF/**"
        // replace version and mcversion
        expand 'm_version': project.mod_version, 'mc_version': project.config.minecraft_version
    }
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }

    exclude '**/Thumbs.db'
}

task renameLanguageFiles(type: Copy){
    mustRunAfter 'crowdin'
    from crowdin.output
    into 'build/translations_lowercase'
    rename { String fileName ->
        fileName.toLowerCase()
    }
}

jar {
    //Keep the jar as clean as possible
    includeEmptyDirs = false


    dependsOn 'crowdin'
    dependsOn 'renameLanguageFiles'
    from{
        fileTree('build/translations_lowercase').matching{
            exclude "**/en_us.lang"
        }
    }





    manifest {
        //attributes 'FMLCorePlugin': 'de.teamlapen.vampirism.coremod.VampirismFMLLoadingPlugin',
        //        'FMLCorePluginContainsFMLMod': 'true'
    }

}
